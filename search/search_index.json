{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>[Site is Under Construction]</p> About MeSkillsToolsResumeContact <p>   Hi, I'm Yama! I am a student who is currently pursuing a Bachelor\u2019s of Science Degree in Computer Science with a minor in Intelligent Robotic Systems at the University of Central Florida. I have an interest in the applications of machine learning and AI in robotics. I'm committed to expanding my knowledge in the ever-evolving tech industry while seeking opportunities to grow professionally in a dynamic and challenging environment.</p> <ul> <li> Python</li> <li> Java</li> <li> HTML</li> <li> CSS</li> <li> C</li> <li> JavaScript</li> </ul> <ul> <li> Git</li> <li> Figma</li> <li> VSCode</li> <li> Eclipse</li> <li> Intellij </li> <li> Unity</li> <li> Android Studio</li> <li> Arduino</li> </ul> <p> View My Resume</p> <ul> <li> Email</li> <li>:simple-linkedin: LinkedIn</li> <li> GitHub</li> </ul>"},{"location":"notes/Java%20Review/","title":"Java Review Notes","text":""},{"location":"notes/Java%20Review/#basics","title":"Basics","text":"<ul> <li>JVM (Java Virtual Machine): Executes Java bytecode</li> <li>JDK (Java Development Kit): Contains tools for developing Java applications</li> <li>JRE (Java Runtime Environment): Provides libraries and JVM for running Java applications</li> </ul>"},{"location":"notes/Java%20Review/#data-types","title":"Data Types","text":"<ul> <li>Primitive Types: <code>int</code>, <code>double</code>, <code>char</code>, <code>boolean</code>, <code>float</code>, <code>long</code>, <code>short</code>, <code>byte</code></li> <li>Reference Types: Objects, Arrays, Strings, etc</li> </ul>"},{"location":"notes/Java%20Review/#variables","title":"Variables","text":"<ul> <li>Local: Declared inside methods or blocks</li> <li>Instance: Belong to instances of a class</li> <li>Static: Belong to the class itself</li> </ul>"},{"location":"notes/Java%20Review/#control-flow","title":"Control Flow","text":"<ul> <li>Conditionals: <code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code></li> <li>Loops: <code>for</code>, <code>while</code>, <code>do-while</code></li> <li>Break/Continue: Control loop execution</li> </ul>"},{"location":"notes/Java%20Review/#object-oriented-programming","title":"Object-Oriented Programming","text":"<ul> <li>Class: Blueprint for objects</li> <li>Object: Instance of a class</li> <li>Inheritance: <code>class SubClass extends SuperClass</code></li> <li>Polymorphism: Method overriding and overloading</li> <li>Encapsulation: Use private fields with public getters/setters</li> <li>Abstraction: Abstract classes and interface</li> </ul>"},{"location":"notes/Java%20Review/#access-modifiers","title":"Access Modifiers","text":"<ul> <li><code>public</code>: Accessible everywhere</li> <li><code>protected</code>: Accessible in the same package or subclasses</li> <li><code>default</code>: Accessible within the same package</li> <li><code>private</code>: Accessible only within the class</li> </ul>"},{"location":"notes/Java%20Review/#key-concepts","title":"Key Concepts","text":"<ul> <li>Constructors: Special methods to initialize objects</li> <li><code>this</code> Keyword: Refers to the current object</li> <li><code>super</code> Keyword: Refers to the parent class</li> <li>Static Methods/Variables: Belong to the class, not instances</li> <li>Final Keyword: Used to declare constants, prevent inheritance, or prevent method overriding</li> </ul>"},{"location":"notes/Java%20Review/#collections","title":"Collections","text":"<ul> <li>List: <code>ArrayList</code>, <code>LinkedList</code></li> <li>Set: <code>HashSet</code>, <code>TreeSet</code></li> <li>Map: <code>HashMap</code>, <code>TreeMap</code></li> </ul>"},{"location":"notes/Java%20Review/#exception-handling","title":"Exception Handling","text":"<ul> <li>Try-Catch: Handle exceptions</li> <li>Finally: Code that always executes</li> <li>Throws: Declare exceptions</li> <li>Throw: Manually throw exceptions</li> </ul>"},{"location":"notes/Java%20Review/#inputoutput","title":"Input/Output","text":"<ul> <li>Scanner: For user input</li> <li>BufferedReader: For efficient reading</li> <li>File: For handling files</li> </ul>"},{"location":"notes/Java%20Review/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>toString()</code>: Converts objects to strings</li> <li><code>equals()</code>: Compares object content</li> <li><code>hashCode()</code>: Returns hash code</li> <li>Lambda Expressions: Concise way to express instances of single-method interfaces</li> <li>Streams: Process sequences of elements with functional-style operations</li> </ul>"},{"location":"notes/Python%20Review/","title":"Python Review","text":"<p>{This is a basic Python Review}</p>"},{"location":"notes/Python%20Review/#syntax","title":"Syntax","text":"<ul> <li>Indention is important to indicate blocks of code in Python</li> <li>Comments:  <pre><code>#one line comment\n\n\"\"\" \nCommenting for\nmore than \none line\n! \n\"\"\" \n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#variables","title":"Variables","text":"<ul> <li>There's no command for declaring a variable, so you can just do <code>x = 9</code>.</li> <li>Variables are created whenever you assign a value to them, meaning you don't need to declare a type, and you're free to change the type after it has been created.</li> <li>If you want to specify the type, you can cast it.</li> <li>If you want to find the data type of the variable, you can print it with <code>type()</code>.</li> <li>String variables can be declared with single or double quotes. <pre><code>#creating variables\nx = 1\ny = \"yama\"\n\n#casting\nx = int(1)  # 1\nx = str(1)  # '1'\nx = float(1)  # 1.0\n\n#type\nprint(type(x))\n\n#string\nx = \"yama\"\nx = 'yama'\n# ^ these two are the same\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#names","title":"Names","text":"<ul> <li>Variable names must start with a letter or underscore; cannot start with numbers.</li> <li>Variable names are case-sensitive (<code>hello</code>, <code>HELLO</code>, <code>Hello</code> are all different).</li> <li>Cannot be a Python keyword.</li> <li>Variable names can only contain alphanumeric characters and underscores (A-z, 0-9, and _ ).</li> <li>Variable naming conventions: <pre><code>#camelCase\nthisIsCamelCase = \"hi\"\n\n#PascalCase \nThisIsPascalCase = \"hello\"\n\n#snake_case\nthis_is_snake_case = \"hey\"\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#multiple-values","title":"Multiple Values","text":"<ul> <li>You can assign multiple variables in one line: <pre><code>x, y, z = \"apple\", \"orange\", \"cherry\"\n</code></pre></li> <li>If you have a list, you can unpack it to extract the values into variables: <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nx, y, z = fruits\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#data-types","title":"Data Types","text":"<ul> <li>Common data types: <pre><code>x = 5               #int\ny = 5.5             #float\nz = 1j              #complex\nname = \"yama\"       #str\nis_cool = True      #bool\nfruits = [\"apple\", \"banana\"]  #list\ntuple_example = (\"apple\", \"banana\")  #tuple\nset_example = {\"apple\", \"banana\"}  #set\ndict_example = {\"name\": \"yama\", \"age\": 20}  #dict\nnone_value = None   #none type\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#type-conversion","title":"Type Conversion","text":"<ul> <li>Convert between data types: <pre><code>x = 5\nx_str = str(x)  # \"5\"\ny = \"10\"\ny_int = int(y)  #10\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#operators","title":"Operators","text":"<ul> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code>, <code>//</code></li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li> <li>Logical: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Assignment: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code></li> <li>Membership: <code>in</code>, <code>not in</code></li> <li>Identity: <code>is</code>, <code>is not</code></li> </ul>"},{"location":"notes/Python%20Review/#conditionals","title":"Conditionals","text":"<pre><code>x = 10\ny = 20\nif x &gt; y:\n    print(\"x is greater\")\nelif x == y:\n    print(\"x is equal to y\")\nelse:\n    print(\"y is greater\")\n</code></pre>"},{"location":"notes/Python%20Review/#loops","title":"Loops","text":"<pre><code>#for loop\nfor i in range(5):\n    print(i)\n\n#while loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n\n#loop control statements\nfor i in range(10):\n    if i == 5:\n        break  # exits loop\n    if i % 2 == 0:\n        continue  # skips to next iteration\n    print(i)\n</code></pre>"},{"location":"notes/Python%20Review/#functions","title":"Functions","text":"<pre><code>def greet(name):\n    return \"Hello \" + name\n\nprint(greet(\"Yama\"))\n\n#function with default parameter\ndef greet(name=\"Guest\"):\n    return \"Hello \" + name\n\nprint(greet())\n\n#lambda f unction\n# -a small anonymous function defined using the 'lambda' keyword\n# it can take any number of arguments but only has one expression, which is evaluated and returned\nsquare = lambda x: x * x\nprint(square(5))  #output: 25\n</code></pre>"},{"location":"notes/Python%20Review/#lists","title":"Lists","text":"<ul> <li>Lists are mutable (can be changed): <pre><code>my_list = [1, 2, 3, \"apple\"]\nmy_list.append(4)  #adds to the end\nmy_list.remove(2)  #removes first occurrence of 2\nprint(my_list)\n</code></pre></li> </ul>"},{"location":"notes/Python%20Review/#dictionaries","title":"Dictionaries","text":"<pre><code>person = {\"name\": \"Yama\", \"age\": 20}\nprint(person[\"name\"])  #access value\nperson[\"city\"] = \"Manhattan\"  #add key-value pair\n</code></pre>"},{"location":"notes/Python%20Review/#exception-handling","title":"Exception Handling","text":"<pre><code>try:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nfinally:\n    print(\"Execution complete\")\n</code></pre>"},{"location":"notes/Python%20Review/#file-handling","title":"File Handling","text":"<pre><code>#writing to a file\nwith open(\"example.txt\", \"w\") as f:\n    f.write(\"hello yama!\")\n\n#reading from a file\nwith open(\"example.txt\", \"r\") as f:\n    content = f.read()\n    print(content)\n</code></pre>"},{"location":"notes/Python%20Review/#extras","title":"Extras","text":"<ul> <li>Input: <pre><code>name = input(\"what's your name? \")\nprint(\"hello, \" + name)\n</code></pre></li> <li>Importing Modules: <pre><code>import math\nprint(math.sqrt(16))  # 4.0\n</code></pre></li> <li>Import with Alias: <pre><code>import numpy as np\n</code></pre></li> <li>Random Numbers: <pre><code>import random\nprint(random.randint(1, 100))  #random number between 1 and 100\n</code></pre></li> </ul>"},{"location":"notes/docs/","title":"Documentation","text":"<p>This section is dedicated to organizing and sharing notes &amp; documentation related to my various interests. It will serve as a comprehensive resource where I will upload detailed insights, summaries, and explanations on topics that I\u2019m exploring. Each document will include references and sources at the bottom to acknowledge the materials I have referenced or used throughout my research process.</p>"},{"location":"notes/intotorl/","title":"Intro to Reinforcement Learning","text":"<p>Reinforcement Learning (RL) is a subfield of machine learning that teaches an agent how to choose an action in its environment to maximize rewards over time. Unlike supervised learning, RL doesn't rely on labeled datasets; instead, the agent learns through interactions with its environment, using feedback from rewards to improve its decision-making over time.  </p>"},{"location":"notes/intotorl/#key-concepts","title":"Key Concepts","text":"<ul> <li>Agent: The program you train with the aim of performing a specified task.  </li> <li>Environment: The real or virtual world where the agent performs actions.  </li> <li>Action: A move made by the agent that causes a change in the environment.  </li> <li>Rewards: The evaluation of an action, which can be positive or negative.  </li> <li>State: A representation of the environment at a specific moment in time.  </li> <li>Policy: A strategy that defines the agent\u2019s behavior by mapping states to actions.  </li> <li>Value Function: Estimates the long-term reward for being in a particular state or taking a particular action.  </li> <li>Q-Value (Action-Value): Estimates the total expected reward for taking a given action from a given state.  </li> </ul>"},{"location":"notes/intotorl/#supervise-unsupervised","title":"Supervise &amp; Unsupervised","text":"<ul> <li>Supervised Learning: Uses labeled datasets where each input has a corresponding output to train algorithms to predict outcomes and recognize patterns.  </li> <li>Unsupervised Learning: Applies machine learning on unlabeled datasets that have no predefined labels or outputs, aiming to uncover hidden patterns in the data.  </li> </ul>"},{"location":"notes/intotorl/#key-differences","title":"Key Differences","text":"<ol> <li>Static vs. Dynamic </li> <li>Supervised and unsupervised learning focus on finding patterns in static training data.  </li> <li> <p>RL is dynamic, focusing on developing policies to guide the agent's actions at each step.  </p> </li> <li> <p>No Explicit Right Answer </p> </li> <li>In supervised learning, the \"right answer\" is provided by training data.  </li> <li> <p>In RL, the right answer isn\u2019t explicit \u2014 the agent learns through trial and error, relying on rewards to gauge progress or failure.  </p> </li> <li> <p>Exploration Required </p> </li> <li>Supervised and unsupervised learning derive answers directly from training data.  </li> <li>In RL, the agent must explore the environment to discover new strategies for earning rewards.  </li> </ol>"},{"location":"notes/intotorl/#openai-gym","title":"OpenAI Gym","text":"<ul> <li>A toolkit for developing and comparing reinforcement learning algorithms.  </li> <li>Provides a game-like environment where agents can take actions and learn from the outcomes.  </li> <li>After the agent takes an action, the environment updates its state, and the agent uses these changes to decide its next move.  </li> </ul>"},{"location":"notes/intotorl/#markov-process","title":"Markov Process","text":"<p>Markov Property: A process where the future state depends only on the present state and not on the sequence of events that preceded it.  </p> <ul> <li>The state of X at time t+1 depends only on the state of X at time t, making it independent of past states.  </li> <li>When the Markov Property is applied to a random process, it becomes a Markov Chain \u2014 a model that describes a sequence of possible events where the probability of each event depends only on the state attained in the previous event.  </li> </ul>"},{"location":"notes/intotorl/#important-notes","title":"Important Notes","text":"<ul> <li>Exploration vs. Exploitation: The agent must balance between exploring new actions to find better rewards and exploiting known actions to maximize immediate rewards.  </li> <li>Delayed Rewards: Actions can have long-term consequences, making it essential to consider future rewards, not just immediate feedback.  </li> <li>Credit Assignment Problem: Determining which actions contributed to the rewards received can be challenging, especially when rewards are delayed.  </li> <li>Training Process: RL typically involves running episodes where the agent repeatedly interacts with the environment, gathering experience and refining its policy.  </li> </ul>"},{"location":"projects/FaceGuard/","title":"Face Guard","text":"<p>Face Guard was my first experience working with OpenCV, where I followed a tutorial to implement face detection using MediaPipe and OpenCV. The project focuses on ensuring accurate and consistent face blurring across various media, including photos, videos, and live webcam feeds. Through this process, I gained hands-on experience with computer vision techniques, such as facial landmark detection and real-time image processing.</p> <p>Working on this project introduced me to the fundamentals of handling video streams, integrating machine learning models for face detection, and applying transformations to anonymize sensitive information. It also deepened my understanding of OpenCV\u2019s powerful image processing capabilities and MediaPipe\u2019s ease of use for real-time applications. This project sparked my interest in privacy-focused technology and provided a strong foundation for future work in computer vision and interactive applications. </p> <p></p>    Your browser does not support the video tag."},{"location":"projects/FlappyBird/","title":"Flappy Bird","text":"<p>This project was my first experience diving into game design. I experimented with Unity and created a pink-themed Flappy Bird game using C# and designed all the graphics myself. It was an exciting introduction to game development, where I learned about physics, collision detection, and user input handling. This project sparked my interest in building interactive experiences and gave me a great learning foundation for future game design endeavors. </p> <p></p>"},{"location":"projects/Info/","title":"Projects","text":"<p>This section is dedicated to showcasing the projects I have worked on, providing detailed explanations of the processes, challenges, and solutions involved. For each project, I will include descriptions, code snippets, progress, and the overall goals I aimed to achieve. Additionally, I will reference relevant videos, tutorials, and resources that I followed or found useful during the development of each project which offers insight into my learning process.</p>"},{"location":"projects/MATEROV/","title":"MATE ROV","text":"<p>In this project, I developed and coded a leak sensor to detect water leakage in the MATE ROV\u2019s enclosure, enhancing underwater safety and durability by providing real-time alerts to the system. Additionally, I created a terminal user interface using PySerial and the curses library to display both leak sensor and temperature information on the flight control system, ensuring clear and immediate feedback for operators. This project deepened my understanding of sensor integration, serial communication, and building intuitive user interfaces for real-time monitoring.</p> <p> </p>"},{"location":"projects/Minesweeper/","title":"Minesweeper","text":"<p>I love playing Minesweeper, so it inspired me to create my own clone of the classic game using Java. This project involved building the game logic from scratch, handling grid generation, mine placement, and implementing the rules for uncovering tiles and flagging mines. It was a fun challenge that deepened my understanding of object-oriented programming, game development, and algorithm design while recreating a game I\u2019ve always enjoyed. </p>"},{"location":"projects/NavX/","title":"NavX","text":"<p>NavX is the current project I'm working on with a team of two other people, where we are assembling and programming an autonomous object avoidance robot car. The robot integrates various sensors and intelligent algorithms to enable real-time navigation. I\u2019m actively developing and implementing obstacle detection and identification features, enhancing the robot\u2019s ability to recognize and report objects blocking its path. This project is giving me hands-on experience with sensor fusion, real-time processing, and autonomous system design.</p> <p></p>"},{"location":"projects/Okayama/","title":"Okayama","text":"<p>I built a website for a sushi restaurant called Okayama using HTML, CSS, and JavaScript. The project involved designing a clean, user-friendly interface to showcase the restaurant\u2019s menu, atmosphere, and contact information. I focused on creating a user friendly layout, smooth navigation, and interactive elements to enhance the user experience. This project allowed me to apply my front-end development skills while crafting a digital presence that reflects the restaurant\u2019s unique identity.</p> <p> </p>"},{"location":"projects/Pok%C3%A9book/","title":"Pok\u00e9book","text":"<p>Pok\u00e9book is a full-stack web application designed as a Pok\u00e9mon-themed contact manager, allowing users to create, read, update, and delete (CRUD) contacts. The web app features a playful, Pok\u00e9mon-inspired UI, making contact management more engaging. Users can store, organizeand manage thier contacts. This project combines front-end and back-end technologies to deliver a seamless and interactive experience. I worked on this group with a team of 4 other people. I focused on the front-end development where I used HTML, CSS, and JavaScript</p> <p> </p>"}]}